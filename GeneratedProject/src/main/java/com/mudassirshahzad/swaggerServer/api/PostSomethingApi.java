/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.mudassirshahzad.swaggerServer.api;

import com.mudassirshahzad.swaggerServer.model.Error;
import com.mudassirshahzad.swaggerServer.model.TestProductListTransaction1;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-19T16:46:07.850+04:00")

@Api(value = "postSomething", description = "the postSomething API")
public interface PostSomethingApi {

    Logger log = LoggerFactory.getLogger(PostSomethingApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Initiates a test POST transaction.", nickname = "testTransaction1", notes = "", response = TestProductListTransaction1.class, tags={ "Test Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful testTransaction1", response = TestProductListTransaction1.class),
        @ApiResponse(code = 400, message = "Invalid request.", response = Error.class),
        @ApiResponse(code = 500, message = "Error in processing the request.", response = Error.class) })
    @RequestMapping(value = "/postSomething",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TestProductListTransaction1> testTransaction1(@ApiParam(value = "session ID." ,required=true) @RequestHeader(value="sesssionId", required=true) String sesssionId,@ApiParam(value = "other id." ,required=true) @RequestHeader(value="anyOtherId", required=true) String anyOtherId,@ApiParam(value = "TestProduct list for transaction1." ,required=true )   @RequestBody TestProductListTransaction1 body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"param1\" : \"param1\",  \"param2\" : \"param2\"}", TestProductListTransaction1.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PostSomethingApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
